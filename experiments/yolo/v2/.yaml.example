# Created on YYYY-MM-DD HH:mm:ss

network_recognition_initial:  # Specifications by which the initial recognition training should follow
  start_iter: # (integer) - Denoting the start of iterations. Can be overridden when `--resume` flag is present
  end_iter: # (integer) - End of iterations, calculated by ([num_data * item_usage * increase_factor] / batch_size) * epochs
  resolution: # (integer) - Input image resolution
  cuda: # (boolean) - Force to use CUDA device or not. If `False`, CPU is used; if `True`, GPU with CUDA is used; if `~`, automatic CUDA selection will occur
  optimizer:
    lr: # (float) - Learning rate to be used by the optimizer. Also serves as initial learning rate to be used in learning rate decay
    momentum: # (float) - Momentum of SGD optimizer, which is used as the default optimizer in this model's implementation
    weight_decay: # (float) - Weight decay of SGD optimizer
  dataset:
    source: # (string) - Source of individual (cropped) image in the dataset, where the images are stored with respect to each's class
    batch_size: # (integer) - Size of mini-batch to be received by the model before backpropagating error
    item_usage: # (integer) - Maximum usage of each individual image in the dataset, used in `UsageBasedDataset` to calculate how many data its instance(s) must emit
    increase_by_factor: # (integer) - Factor by which the created datasets will be stacked (increased). Useful for augmenting data
    validation:
      source: # (string) - Source of individual validation (cropped) image in the dataset, where the images are stored with respect to each's class
      indices_path: # (string) - Indices of validation files
      files_path:  # (string) - File list for validation set
  savefile: # (string) - Where to save the weights of training a model with this specification; weight saving will occur per iteration

network_recognition_finetune:  # Specifications by which the fine-tuning recognition training should follow
  start_iter: # (integer) - Denoting the start of iterations. Can be overridden when `--resume` flag is present
  end_iter: # (integer) - End of iterations, calculated by ([num_data * item_usage * increase_factor] / batch_size) * epochs
  resolution: # (integer) - Input image resolution
  backbone_weight: # (string) - Path to previous (initial) recognition training's model's weights
  cuda: # (boolean) - Force to use CUDA device or not. If `False`, CPU is used; if `True`, GPU with CUDA is used; if `~`, automatic CUDA selection will occur
  optimizer:
    lr: # (float) - Learning rate to be used by the optimizer. Also serves as initial learning rate to be used in learning rate decay
    momentum: # (float) - Momentum of SGD optimizer, which is used as the default optimizer in this model's implementation
    weight_decay: # (float) - Weight decay of SGD optimizer
  dataset:
    source: # (string) - Source of individual (cropped) image in the dataset, where the images are stored with respect to each's class
    batch_size: # (integer) - Size of mini-batch to be received by the model before backpropagating error
    item_usage: # (integer) - Maximum usage of each individual image in the dataset, used in `UsageBasedDataset` to calculate how many data its instance(s) must emit
    increase_by_factor: # (integer) - Factor by which the created datasets will be stacked (increased). Useful for augmenting data
    validation:
      source: # (string) - Source of individual validation (cropped) image in the dataset, where the images are stored with respect to each's class
      indices_path: # (string) - Indices of validation files
      files_path:  # (string) - File list for validation set
  savefile: # (string) - Where to save the weights of training a model with this specification; weight saving will occur per iteration

network_detection:  # Specifications by which the detection training should follow
  start_iter:  # (integer) - Denoting the start of iterations. Can be overridden when `--resume` flag is present
  end_iter: # (integer) - End of iterations, calculated by ([num_data * max_usage / max_data] / batch_size) * epochs
  anchor_boxes: # (list[integer]) - In floating values relative to output feature map (13x13). Specified as width and height, repeated for 5 times for loss calculation
    -
    -
    -
    -
    -
    -
    -
    -
    -
    -
  decay_lr: # According to https://github.com/marvis/pytorch-yolo2 specifications; modified based on ~= ratio
    iterations: # (list[integer]) - Iterations of which to decay the learning rate
      -
      -
      -
      -
    scales: # (list[number]) - Scales by which decays the learning rate
      -
      -
      -
      -
  backbone_weight: # (string) - Path to previous (finetune) recognition training's model's weights
  cuda:  # (boolean) - Force to use CUDA device or not. If `False`, CPU is used; if `True`, GPU with CUDA is used; if `~`, automatic CUDA selection will occur
  optimizer:
    lr: # (float) - Learning rate to be used by the optimizer. Also serves as initial learning rate to be used in learning rate decay
    momentum: # (float) - Momentum of SGD optimizer, which is used as the default optimizer in this model's implementation
    weight_decay: # (float) - Weight decay of SGD optimizer
  dataset:
    source: # (string) - Source of individual (cropped) image in the dataset, where the images are stored with respect to each's class
    batch_size: # (integer) - Size of mini-batch to be received by the model before backpropagating error
    to_tensor: # (boolean) - Whether to directly transform the transformed image to tensor or not
    combined:
      max_data: # (integer) - How many individual image can be combined to a single combined image
      max_usage: # (integer) - Maximum individual image usage in constructing combined images
      min_resize: # (integer) - Minimum resize, either in width and/or height, for each individual image
      max_resize: # (integer) - Maximum resize, either in width and/or height, for each individual image
  savefile:  # (string) - Where to save the weights of training a model with this specification; weight saving will occur per iteration
